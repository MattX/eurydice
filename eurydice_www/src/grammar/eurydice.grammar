@top Program { Statement* }

@detectDelim

@precedence {
    unop,
    d @left,
    at @left,
    pow @left,
    mul @left,
    times @left,
    comp @left,
    bool @left
}

@skip { space | Comment }

@tokens {
    space { @whitespace+ }
    Comment { "\\" ![\\]* "\\" }
    VariableIdentifier { $[A-Z_]+ }
    Word { $[a-z]$[a-z_]* }
    Number { $[0-9]+ }
    String { "\"" (!["\\] | "\\" _)* "\"" }
    "(" ")"
    "{" "}"
    "[" "]"
    ":"
    "@"
    "^"
    "*" "/"
    "+" "-"
    "=" "!=" "<" "<=" ">" ">="
    "&" "|"
}

kw<term> { @specialize[@name={term}]<Word, term> }
ty<term, name> { @specialize[@name={name}]<Word, term> }

Statement {
    Assignment |
    FunctionDefinition |
    Output |
    Print |
    Return |
    // SetStatement |
    LoopStatement |
    IfStatement
}

Assignment { VariableIdentifier ":" Expression }

Output { kw<"output"> Expression OutputName? }
Print { kw<"print"> Expression OutputName? }
OutputName { kw<"named"> String }

Return { kw<"result"> ":" Expression }

Expression {
    SafeExpression |
    !unop kw<"d"> Expression |
    !unop "-" Expression |
    Expression !d kw<"d"> Expression |
    Expression !at "@" Expression |
    Expression !pow "^" Expression |
    Expression !mul "*" Expression |
    Expression !mul "/" Expression |
    Expression !times "+" Expression |
    Expression !times "-" Expression |
    Expression !comp "=" Expression |
    Expression !comp "!=" Expression |
    Expression !comp "<" Expression |
    Expression !comp "<=" Expression |
    Expression !comp ">" Expression |
    Expression !comp ">=" Expression |
    Expression !bool "&" Expression |
    Expression !bool "|" Expression
}

SafeExpression {
    !unop "#" Expression |
    !unop "!" Expression |
    "(" Expression ")" |
    // ListLiteral |
    // FunctionCall |
    Reference |
    Number |
    SafeExpression !d kw<"d"> Expression |
    SafeExpression !at "@" Expression |
    SafeExpression !pow "^" Expression |
    SafeExpression !mul "*" Expression |
    SafeExpression !mul "/" Expression |
    SafeExpression !times "+" Expression |
    SafeExpression !times "-" Expression |
    SafeExpression !comp "=" Expression |
    SafeExpression !comp "!=" Expression |
    SafeExpression !comp "<" Expression |
    SafeExpression !comp "<=" Expression |
    SafeExpression !comp ">" Expression |
    SafeExpression !comp ">=" Expression |
    SafeExpression !bool "&" Expression |
    SafeExpression !bool "|" Expression
}

Reference { VariableIdentifier }

IfStatement {
    kw<"if"> Expression "{" Statement+ "}"
}

LoopStatement {
    kw<"loop"> VariableIdentifier kw<"over"> Expression "{" Statement+ "}"
}

FunctionDefinition {
    kw<"function"> ":" (Word | Argument)+ "{" Statement+ "}"
}

Argument { VariableIdentifier (":" Type)? }

// Todo: use tokens or something to give "d" the right name
Type { ty<"n", "ty-n"> | ty<"s", "ty-s"> | kw<"d"> }
