use std::str::FromStr;
use crate::ast::{WithRange, Expression, UnaryOp, BinaryOp, Statement, ListLiteralItem, ListLiteral,
                 FunctionCallItem, FunctionDefinitionItem, FunctionDefinition, StaticType,
                 apply_string_escapes,
                 make_function_definition, make_function_call};

grammar;

match {
    r"\s*" => { }, // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"\\[^\\]*\\" => { }, // Skip `\ comments \`
    _
}

pub Body: Vec<WithRange<Statement>> = {
    <ss:Statement*> => ss,
};

pub Statement: WithRange<Statement> = {
    <start: @L> <s:StatementInner> <end: @R> => WithRange::new(start, end, s),
};

pub StatementInner: Statement = {
    <id_start: @L> <id:VariableIdentifier> <id_end: @L> ":" <e:Expr> => 
        Statement::Assignment { name: WithRange::new(id_start, id_end, id), value: e },
    <fd:FunctionDefinition> => Statement::FunctionDefinition(fd),
    "output" <e:Expr> <n:OutputName?> => Statement::Output { value: e, named: n },
    "result" ":" <e:Expr> => Statement::Return { value: e },
    "set" => todo!(),
    "loop" <id_start: @L> <id:VariableIdentifier> <id_end: @L> "over" <e:Expr> "{" <b:Block> "}" =>
        Statement::Loop { variable: WithRange::new(id_start, id_end, id), range_expression: Box::new(e), body: b },
    <i:IfStatement> => i,
};

IfStatement: Statement = {
    "if" <e:Expr> "{" <b:Block> "}" => Statement::If { condition: Box::new(e), then_block: b, else_block: None },
    "if" <e:Expr> "{" <thn:Block> "}" "else" "{" <els:Block> "}" =>
        Statement::If { condition: Box::new(e), then_block: thn, else_block: Some(els) },
    "if" <e:Expr> "{" <thn:Block> "}" "else" <start: @L> <other:IfStatement> <end: @R> =>
        Statement::If { condition: Box::new(e), then_block: thn,
            else_block: Some(vec![WithRange::new(start, end, other)]) },
};

pub Block: Vec<WithRange<Statement>> = {
    <ss:Statement*> => ss,
};

pub Expr: WithRange<Expression> = {
    <start: @L> <e:ExprInner0> <end: @R> => WithRange::new(start, end, e),
};

pub SafeExpr: WithRange<Expression> = {
    <start: @L> <e:SafeExprInner0> <end: @R> => WithRange::new(start, end, e),
};

// ExprInner1 through ExprInner10 are reserved for future ops

ExprInnerTier<OpClass, Rhs, NextTier>: Expression = {
    <left_start: @L> <left:ExprInnerTier<OpClass, Rhs, NextTier>> <left_end: @R>
    <op_start: @L> <o:OpClass> <op_end: @R>
    <right_start: @L> <right:Rhs> <right_end: @R> =>
        Expression::BinaryOp { 
            op: WithRange::new(op_start, op_end, o),
            left: Box::new(WithRange::new(left_start, left_end, left)),
            right: Box::new(WithRange::new(right_start, right_end, right))
        },
    NextTier,
}

ExprInner0 = ExprInnerTier<BinaryOp0, ExprInner1, ExprInner1>;
SafeExprInner0 = ExprInnerTier<BinaryOp0, ExprInner1, SafeExprInner1>;

ExprInner1 = ExprInnerTier<BinaryOp1, ExprInner2, ExprInner2>;
SafeExprInner1 = ExprInnerTier<BinaryOp1, ExprInner2, SafeExprInner2>;

ExprInner2 = ExprInnerTier<BinaryOp2, ExprInner3, ExprInner3>;
SafeExprInner2 = ExprInnerTier<BinaryOp2, ExprInner3, SafeExprInner3>;

ExprInner3 = ExprInnerTier<BinaryOp3, ExprInner4, ExprInner4>;
SafeExprInner3 = ExprInnerTier<BinaryOp3, ExprInner4, SafeExprInner4>;

ExprInner4 = ExprInnerTier<BinaryOp4, ExprInner5, ExprInner5>;
SafeExprInner4 = ExprInnerTier<BinaryOp4, ExprInner5, SafeExprInner5>;

ExprInner5 = ExprInnerTier<BinaryOp5, ExprInner11, ExprInner11>;
SafeExprInner5 = ExprInnerTier<BinaryOp5, ExprInner11, SafeExprInner11>;

pub ExprInner11: Expression = {
    <op_start: @L> <o:UnsafeUnaryOp> <op_end: @R> <start: @L> <e:ExprInner11> <end: @R> =>
        Expression::UnaryOp { 
            op: WithRange::new(op_start, op_end, o),
            operand: Box::new(WithRange::new(start, end, e))
        },
    SafeExprInner11,
}

pub SafeExprInner11: Expression = {
    <op_start: @L> <o:SafeUnaryOp> <op_end: @R> <start: @L> <e:ExprInner11> <end: @R> =>
        Expression::UnaryOp { 
            op: WithRange::new(op_start, op_end, o),
            operand: Box::new(WithRange::new(start, end, e))
        },
    ExprInner12,
}

pub ExprInner12: Expression = {
    #[precedence(level="0")]
    "(" <e:Expr> ")" => e.value,
    <l:List> => Expression::List(l),
    <fc:FunctionCall> => fc,
    <id:VariableIdentifier> => Expression::Reference(id),
    <n:Num> => Expression::Int(n),
};

pub OutputName: WithRange<String> = {
    "named" <start: @L> <l:r#""(\\\\|\\"|[^"\\])*""#> <end: @R> =>
        WithRange::new(start, end, apply_string_escapes(&l[1..l.len()-1]).into()),
}

pub List: ListLiteral = {
    "{" <es:Comma<ListItemWithRepeat>> "}" => ListLiteral { items: es },
}

pub ListItemWithRepeat: (ListLiteralItem, usize) = {
    <e:ListItem> <r:Repeat?> => (e, r.unwrap_or(1)),
};

pub Repeat: usize = {
    // TODO disallow negative numbers
    ":" <n:Num> => n as usize
};

pub ListItem: ListLiteralItem = {
    <e:Expr> => ListLiteralItem::Expr(e),
    <start:Expr> ".." <end:Expr> => ListLiteralItem::Range(start, end),
};

pub FunctionCall: Expression = {
    "[" <items:FunctionCallItem*> <last:FinalFunctionCallItem?> "]" => {
        let mut all_items = items.into_iter().flatten().collect::<Vec<_>>();
        if let Some(last) = last {
            all_items.extend(last.into_iter());
        }
        make_function_call(all_items)
    }
};

pub FunctionCallItem: Vec<WithRange<FunctionCallItem>> = {
    <start: @L> <w:Word> <end: @R> => vec![WithRange::new(start, end, FunctionCallItem::Word(w))],
    <e:Expr> <es:SafeExpr*> <start: @L> <w:Word> <end: @R> => {
        let mut items = vec![WithRange::new(e.range.start, e.range.end, FunctionCallItem::Expr(e.value))];
        items.extend(es.into_iter().map(|e| WithRange::new(e.range.start, e.range.end, FunctionCallItem::Expr(e.value))));
        items.push(WithRange::new(start, end, FunctionCallItem::Word(w)));
        items
    }
};

pub FinalFunctionCallItem: Vec<WithRange<FunctionCallItem>> = {
    <e:Expr> <es:SafeExpr*> => {
        let mut items = vec![WithRange::new(e.range.start, e.range.end, FunctionCallItem::Expr(e.value))];
        items.extend(es.into_iter().map(|e| WithRange::new(e.range.start, e.range.end, FunctionCallItem::Expr(e.value))));
        items
    }
}

pub FunctionDefinition: FunctionDefinition = {
    "function" ":" <items:FunctionDefinitionItem+> "{" <b:Block> "}" => make_function_definition(items, b),
};

pub FunctionDefinitionItem: WithRange<FunctionDefinitionItem> = {
    <start: @L> <w:Word> <end: @R> => WithRange::new(start, end, FunctionDefinitionItem::Word(w)),
    <start: @L> <id:SingleArg> <end: @R> => WithRange::new(start, end, id),
};

pub SingleArg: FunctionDefinitionItem = {
    <id:VariableIdentifier> ":" <t:StaticType> => FunctionDefinitionItem::ArgWithType(id, t),
};

pub StaticType: StaticType = {
    "n" => StaticType::Int,
    "s" => StaticType::List,
    "d" => StaticType::Pool,
};

// TOOD: avoid unwrap here
Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
VariableIdentifier: String = <s:r"[A-Z][A-Z_]*"> => s.to_string();
Word: String = <s:r"[a-z][a-z_]+"> => s.to_string();

SafeUnaryOp: UnaryOp = {
    "!" => UnaryOp::Invert,
    "#" => UnaryOp::Length,
};

// These are unary ops that are also binary ops, and therefore can cause ambiguity where expressions
// can directly follow each other (which is just function calls).
UnsafeUnaryOp: UnaryOp = {
    "d" => UnaryOp::D,
    "-" => UnaryOp::Negate,
};

BinaryOp5: BinaryOp = {
    "d" => BinaryOp::D,
    "@" => BinaryOp::At,
};
BinaryOp4: BinaryOp = {
    "^" => BinaryOp::Pow,
};
BinaryOp3: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
};
BinaryOp2: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
};
BinaryOp1: BinaryOp = {
    "&" => BinaryOp::And,
    "|" => BinaryOp::Or,
}
BinaryOp0: BinaryOp = {
    "=" => BinaryOp::Eq,
    "!=" => BinaryOp::Ne,
    "<" => BinaryOp::Lt,
    "<=" => BinaryOp::Le,
    ">" => BinaryOp::Gt,
    ">=" => BinaryOp::Ge,
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
